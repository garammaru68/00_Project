// HLSL
Texture2D g_txDiffuse;// : register(t0);
SamplerState g_Sample;// : register(s0);
#define g_iNumLight 3

cbuffer SDataCB : register(b0)
{
	float4x4  g_matWorld: packoffset(c0);
	float4x4  g_matView: packoffset(c4);
	float4x4  g_matProj: packoffset(c8);
	float4 vColor : packoffset(c12.x);
	float  fTime  : packoffset(c13.x);
	float  fGameTime  : packoffset(c13.y);
};
// Lighting ////////////////////////////////////////////////////////////////
cbuffer cb1 : register(b1)
{
	float4	g_cmbientMaterial[g_iNumLight];
	float4	g_cDiffuseMaterial[g_iNumLight];
	float4	g_cSpecularMaterial[g_iNumLight];
	float4	g_cEmissionMaterial[g_iNumLight];

	float4	g_cAmbientLightColor[g_iNumLight];
	float4	g_cDiffuseLightColor[g_iNumLight];
	float4	g_cSpecularLightColor[g_iNumLight];
};
cbuffer cb2 : register(b2)
{
	matrix	g_matWorldInverse[g_iNumLight];
	float4	g_vLightDir[g_iNumLight];
	float4	g_vLightPos[g_iNumLight];
	float4	g_vEyeDir[g_iNumLight];
	float4	g_vEyePos[g_iNumLight];
}
cbuffer cb3 : register(b3)
{
	float4	g_vSpotInfo[g_iNumLight];
	float	g_fTheta[g_iNumLight] : packoffset(c0.x);		// 내부 콘의 각도 범위	
	float	g_fPhi[g_iNumLight] : packoffset(c0.y);			// 외부 콘의 각도 범위
	float	g_fFalloff[g_iNumLight] : packoffset(c0.z);		// 내부 콘과 외부 콘의 휘도( Luminance )
	float	g_nNumLights[g_iNumLight] : packoffset(c0.w);	// 거리
}
//////////////////////////////////////////////////////////////////////////
struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
};
struct PS_OUTPUT
{
	float4 c : SV_TARGET;
};
float4 ComputePointLight( float3 vVertexPos, float3 vVertexNormal, int nNumLights)
{
	float4 vPointLightColor = float4(0,0,0,1);
}
PS_OUTPUT PS( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	float4 vTexture = g_txDiffuse.Sample( g_Sample, vIn.t);
	float fdot = dot(-vColor.xyz, vIn.n);
	vOut.c = float4(fdot, fdot, fdot, 1.0f); // vIn.c;
	vOut.c = vIn.c;
	return vOut;
}
PS_OUTPUT PSLine( VS_OUTPUT vIn)
{
	PS_OUTPUT vOut;
	vOut.c = vIn.c;
	return vOut;
}